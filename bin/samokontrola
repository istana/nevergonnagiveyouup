#!/usr/bin/env ruby

require "bundler/setup"
require 'net/http'
require 'optparse'
require 'rspec'
require 'yaml'
require "samo_kontrola"

options = {}

o = OptionParser.new do |opts|
  opts.banner = "Usage: samokontrola options"

  opts.on("-f", "--file FILE", "Specify JSON FILE with checks") do |file_name|
    options[:file_name] = file_name.strip
  end

  opts.on_tail("-h", "--help", "show this message") do
    puts opts
    exit(1)
  end

end

begin
  o.parse!
rescue OptionParser::MissingArgument
  puts o.help
  exit(1)
end

checklist = YAML.load_file(options[:file_name])
puts checklist.inspect

checklist.each do |host_checks|
  if host_checks["ssh"]
    ssh_checks = host_checks["ssh"]
    if ssh_checks["fingerprint"]
      RSpec.describe 'SSH' do
        it "checks the fingerprint of the host is \"#{ssh_checks['fingerprint']}\"" do
          keys = SamoKontrola::Ssh::Fingerprint.(host: host_checks["host"])
          expect(keys.size).to eq(1)
          expect(keys.first).to eq(ssh_checks["fingerprint"])
        end
      end
    end
  end

  if host_checks["http"]
    http_checks = host_checks["http"]

    RSpec.describe 'HTTP' do
      uri = URI("http://#{host_checks['host']}")
      response = Net::HTTP.get_response(uri)

      if http_checks["content"]
        it "the root URL body contains \"#{http_checks['content']}\"" do
          expect(response.body).to include(http_checks["content"])
        end
      end

      if http_checks["status"]
        it "the root URL returns HTTP code \"#{http_checks['status'].to_i}\"" do
          expect(response.code.to_i).to eq(http_checks["status"].to_i)
        end
      end
    end
  end

  if host_checks["https"]
    https_checks = host_checks["https"]

    RSpec.describe 'HTTPS' do
      uri = URI("https://#{host_checks['host']}")
      response = Net::HTTP.get_response(uri)

      if http_checks["content"]
        it "the root URL body contains \"#{https_checks['content']}\"" do
          expect(response.body).to include(https_checks["content"])
        end
      end

      if http_checks["status"]
        it "the root URL returns HTTP code \"#{https_checks['status'].to_i}\"" do
          expect(response.code.to_i).to eq(https_checks["status"].to_i)
        end
      end
    end
  end

end

RSpec::Core::Runner.run(['.'], $stderr, $stdout)
